#labels Featured
==Introduction==

RELIC is a meta-toolkit with strong emphasis in customization. This document details most of the build options available in the 0.2.1 release.

==Customization==

Build options can be changed by using the CMake building system. CMake provides two ways of customizing options: using the `ccmake` interactive utility or by calling the `cmake` command with `-D` directives. For example, to assign a fictional switch `SWITCH` using the command-line tool, run:

{{{
cmake -DSWITCH=on path_to_target
}}}

==Available build options==

In this section, we present all the build options grouped by purpose. For each build option, we specify its type and the possible values it may assume.

===Miscellaneous switches===

These options are boolean switches useful to turn on/off features in the whole library.

{{{
-- Available switches (default = CHECK, VERBS, DOCUM):
   DEBUG=[off|on] Build with debugging support.
   PROFL=[off|on] Build with profiling support.
   CHECK=[off|on] Build with error-checking support.
   VERBS=[off|on] Build with detailed error messages.
   TRACE=[off|on] Build with tracing support.
   MULTI=[off|on] Build with multithreading.
   DOCUM=[off|on] Build documentation.
   STRIP=[off|on] Build only selected algorithms.
   QUIET=[off|on] Build with printing disabled.
   BIGED=[off|on] Build with big-endian support.
   SHLIB=[off|on] Build shared library.
   STLIB=[off|on] Build static library.
   STBIN=[off|on] Build static binaries.
}}}

Several module can also be entirely disabled by specifying a list of module using the `WITH` variable. This variable receives a semicolon-separated list of modules.

{{{
-- Available modules (default = ALL)
   WITH=BN       Multiple precision arithmetic.
   WITH=DV       Temporary double-precision digit vectors.
   WITH=FP       Prime field arithmetic.
   WITH=FB       Binary field arithmetic.
   WITH=EP       Elliptic curves over prime fields.
   WITH=EB       Elliptic curves over binary fields.
   WTTH=EC       Elliptic curve cryptography.
   WITH=PB       Pairings over binary elliptic curves.
   WITH=PP       Pairings over prime elliptic curves.
   WTTH=PC       Pairing-based cryptography.
   WITH=MD       Message digests (Hash functions).
   WITH=CP       Cryptographic protocols.
   WITH=ALL      All of the above.
   Note: the programmer is responsible for not using unselected modules.
}}}

===Tests and benchmarks===

These options specify the number of times a test of benchmark is ran. You can disable the building of tests and/or benchmarks by assigning a `0` value to these variables.

{{{
-- Number of times each test or benchmark is ran (default = 50, 1000):
   TESTS=n        If n > 0, build automated tests and run them n times.
   BENCH=n        If n > 0, build automated benchmarks and run them n * n times.
}}}

===Architecture-specific options===

Several platform characteristics can be customized with these options. If your target platform is a multi-core processor and your compiler supports [http://www.openmp.org OpenMP], `CORES` can be used to run some algorithms in parallel. To this date, this feature is only used by the implementations of cryptographic pairings.

{{{
-- Number of available processor cores (default = 1):
   CORES=n        If n > 1, build with multi-threading support.
}}}

RELIC supports several different architectures. The variable `ARCH` receives a string assignment specifying the target architecture, so any specification must be enclosed by quotes. When the library is cross-compiled, be sure to specify the target platform using this variable.

{{{
-- Available architectures (default = X86_64):
   ARCH=AVR       Atmel AVR ATMega128 8-bit architecture.
   ARCH=MSP       TI MSP430 16-bit architecture.
   ARCH=ARM       ARM 32-bit architecture.
   ARCH=X86       Intel x86-compatible 32-bit architecture.
   ARCH=X86_64    AMD x86_64-compatible 64-bit architecture.
}}}

The size of a full digit can be changed by using the `WORD` size variable. `WORD` should refer to the maximum native unsigned integer type supported in your platform.

{{{
-- Available word sizes (default = 64):
   WORD=8         Build a 8-bit library.
   WORD=16        Build a 16-bit library.
   WORD=32        Build a 32-bit library.
   WORD=64        Build a 64-bit library.
}}}

===Memory allocation and layout===

The `ALIGN` option controls the alignment of digit vectors in the memory layout. It is very useful for specifying custom alignments required by vector instructions sets such as SSE and wMMX.

{{{
-- Byte boundary to align digit vectors (default = 1):
   ALIGN=1        Do not align digit vectors.
   ALIGN=2        Align digit vectors into 16-bit boundaries.
   ALIGN=8        Align digit vectors into 64-bit boundaries.
   ALIGN=16       Align digit vectors into 128-bit boundaries.
}}}

Memory can be allocated in a total of four different ways. The `AUTO` allocator uses automatic allocation from the stack. The `STATIC` allocator tries to allocate all memory from a global pool and to restrict memory consumption. The `DYNAMIC` allocator allocates memory from the heap using `malloc()` and allows multiple-precision integers to grow arbitrarily. The `STACK` allocator uses the `alloca()` function and is also stack-based.

{{{
-- Available memory-allocation policies (default = AUTO):
   ALLOC=AUTO     All memory is automatically allocated.
   ALLOC=STATIC   All memory is allocated statically once.
   ALLOC=DYNAMIC  All memory is allocated dynamically on demand.
   ALLOC=STACK    All memory is allocated from the stack.
}}}

===Arithmetic backends===

RELIC provides a complete framework for customizing arithmetic to a target platform. The `ARITH` variable points to the name of the directory inside the `relic-version/src/low` containing the implementation. By default, only two arithmetic backends are provided: the easy-to-learn C-only `easy` backend and the faster `gmp` backend based on [http://gmplib.org GMP].

{{{
-- Available arithmetic backends (default = easy):
   ARITH=easy     Easy-to-understand implementation.
   ARITH=gmp      GNU Multiple Precision library.
}}}

===Pseudo-random number generation===

RELIC only supports a FIPS-approved PRNG.

{{{
-- Available pseudo-random number generators (default = FIPS):
   RAND=FIPS      Use the FIPS 186-2 SHA1-based generator. (recommended)
}}}

The variable `SEED` can be used to select the source of the initial PRNG seed. The `LIBC` value turns the library deterministic and should only be used for debugging purposes.

{{{
-- Available random number generator seeders (default = DEV):
   SEED=LIBC      Use the libc rand()/random() functions. (not crypto safe!)
   SEED=DEV       Use /dev/random. (recommended)
}}}

===Operating system-specific options===

RELIC supports Linux, FreeBSD and Mac OS X via the `OPSYS` variable. If the target platform does not have an operating system (this is the case when using bare-metal toolchains), use the `NONE` value.

{{{
-- Supported operating systems (default = LINUX):
   OPSYS=NONE     Undefined/No operating system.
   OPSYS=LINUX    GNU/Linux operating system.
   OPSYS=FREEBSD  FreeBSD operating system.
   OPSYS=MACOSX   Mac OS X.
}}}

If your platform has an operating system, you can choose the benchmark timer through the `TIMER` option. You should choose the highest-resolution timer available in your platform.

{{{
-- Supported timers (default = HIGH):
   TIMER=NONE     No timer.
   TIMER=HREAL    GNU/Linux realtime high-resolution timer.
   TIMER=HPROC    GNU/Linux per-process high-resolution timer.
   TIMER=HTHRD    GNU/Linux per-thread high-resolution timer.
   TIMER=ANSI     ANSI-compatible timer.
   TIMER=POSIX    POSIX-compatible timer.
   TIMER=CYCLE    Cycle-counting timer. (architecture-dependant)
}}}